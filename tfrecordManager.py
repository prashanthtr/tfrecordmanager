# Generates a sequence TFrecord for every wav file generated by DSGEnerator

# Two parameters of TFsequence
# Context: Loaded from Configuration file
# Sequnence: Time-stamped values for x(time) and y(amplitude) loaded from generated arrays 

import tensorflow as tf
import os

class tfrecordManager():

    def __init__(self, pfName, audio, outpath, soundDuration, segment):

        self.featureList = []
        self.featureObject = {}
        self.outpath = outpath
        self.pfname = pfName

        self.featureObject["pfname"] = tf.train.Feature(bytes_list=tf.train.BytesList(
                value=[pfName.encode('utf-8')]))
        self.featureObject["soundDuration"] = tf.train.Feature(float_list=tf.train.FloatList(
                value=soundDuration))
        self.featureObject["audio"] = tf.train.Feature(float_list=tf.train.FloatList(
                value=audio))
        self.featureObject["segmentNum"] = tf.train.Feature(int64_list=tf.train.Int64List(
                value=[segment]))

    ''' Takes common parameters for all parameters from Config file '''
    ''' pfname: Full file name with parameters and values '''
    ''' Sounduration: Array with [st, end time]'''
    ''' Segment: Nth even Segment number within sound duration'''

    def __addParam__(self, paramArr, paramValue):

        paramNm = paramArr["synth_pname"]
        self.featureObject[paramNm] = tf.train.Feature(
            float_list=tf.train.FloatList(value=[paramValue]))
        self.featureObject[paramNm+"_synth_units"] = tf.train.Feature(bytes_list=tf.train.BytesList(
            value= [paramArr['synth_units'].encode('utf-8')]))

        self.featureObject[paramNm+"_user_nvals"] = tf.train.Feature(int64_list=tf.train.Int64List(
            value= [paramArr['user_nvals']] if hasattr(self.featureObject, paramNm+"_user_nvals") else [1] ))

        self.featureObject[paramNm+"_user_minval"] = tf.train.Feature(float_list=tf.train.FloatList(
            value= [paramArr['user_minval']] if hasattr(self.featureObject, paramNm+"_user_minval") else [float('inf')]))

        self.featureObject[paramNm+"_user_maxval"] = tf.train.Feature(float_list=tf.train.FloatList(
            value= [paramArr['user_maxval']] if hasattr(self.featureObject, paramNm+"_user_maxval") else [float('inf')]))

        self.featureObject[paramNm+"_synth_minval"] = tf.train.Feature(float_list=tf.train.FloatList(
            value= [paramArr['synth_minval']] if hasattr(self.featureObject, paramNm+"_synth_minval") else [float('inf')]))

        self.featureObject[paramNm+"_synth_maxval"] = tf.train.Feature(float_list=tf.train.FloatList(
            value= [paramArr['synth_maxval']] if hasattr(self.featureObject, paramNm+"_synth_maxval") else [float('inf')]))

    '''use specific values for each parameter to train list of indexed features. Generate record'''
    def __tfgenerate__(self):

        self.featureList = tf.train.Features(feature=self.featureObject)

        self.training = tf.train.Example(features=self.featureList)

        outRecord = self.pfname.split(".params")[0]+'.tfrecord'
        print("writing to ", outRecord)
        with tf.io.TFRecordWriter(outRecord) as writer:
            writer.write(self.training.SerializeToString())

        #self.__readAndPrint__()

    def __readAndPrint__(self):

        # Read and print data:
        sess = tf.compat.v1.InteractiveSession()

        # Read TFRecord file
        filenames = [self.pfname.split(".params")[0]+'.tfrecord']
        raw_dataset = tf.data.TFRecordDataset(filenames)
        #filename_queue = tf.train.string_input_producer([self.pfname.split(".params")[0]+'.tfrecord'])

        for raw_record in raw_dataset.take(1):
          example = tf.train.Example()
          example.ParseFromString(raw_record.numpy())
          print(example)